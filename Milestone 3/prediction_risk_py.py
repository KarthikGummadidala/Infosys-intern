# -*- coding: utf-8 -*-
"""prediction_risk.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wOcZY9pWTmiway-CyVhxs6i9o8_1SC4d
"""

import pandas as pd

def analyze_warehouse_data(file_path, capacity_threshold=0.8, low_utilization_threshold=0.4, risk_threshold="High", sentiment_threshold="Negative"):
    """
    Analyze warehouse data to provide alerts for stock management based on utilization, risk analysis, and sentiment.

    Args:
        file_path (str): Path to the warehouse data CSV file.
        capacity_threshold (float): Threshold for high utilization (default: 80%).
        low_utilization_threshold (float): Threshold for low utilization (default: 40%).
        risk_threshold (str): Risk level considered critical (default: "High").
        sentiment_threshold (str): Sentiment level considered critical (default: "Negative").

    Returns:
        List[Tuple]: Alerts for each month with recommended actions and reasons.
    """
    try:
        # Load the CSV data
        data = pd.read_csv(file_path)

        # Store alerts
        alerts = []

        for index, row in data.iterrows():
            # Calculate warehouse utilization
            utilization = row['Monthly Incoming'] / row['Warehouse Capacity']

            # Analyze risk factors and sentiment
            if utilization > capacity_threshold or row['Risk Analysis'] == risk_threshold:
                if row['Sentiment'] == sentiment_threshold:
                    alerts.append((row['Month'], "SELL", f"High utilization ({utilization:.2f}), {row['Risk Analysis']} risk, {row['Sentiment']} sentiment"))
                else:
                    alerts.append((row['Month'], "MONITOR", f"High utilization ({utilization:.2f}) with {row['Risk Analysis']} risk"))
            elif utilization < low_utilization_threshold:  # If utilization is very low
                alerts.append((row['Month'], "BUY", f"Low utilization ({utilization:.2f}), consider buying material"))

        return alerts

    except Exception as e:
        print(f"Error processing the file: {e}")
        return []

# Sample CSV data creation
data = pd.read_csv("/content/drive/MyDrive/clothing_warehouse_data (1).csv")

# Save sample data to CSV for demonstration
sample_file = "warehouse_data.csv"
pd.DataFrame(data).to_csv(sample_file, index=False)

# Analyze the warehouse data
alerts = analyze_warehouse_data(sample_file)

# Display alerts in a formatted way
print("\n--- Warehouse Alerts ---\n")
for alert in alerts:
    print(f"Month: {alert[0]} | Action: {alert[1]} | Reason: {alert[2]}")

# Optional: Save alerts to a CSV file
alerts_df = pd.DataFrame(alerts, columns=['Month', 'Action', 'Reason'])
alerts_df.to_csv("warehouse_alerts.csv", index=False)
print("\nAlerts saved to 'warehouse_alerts.csv'.")